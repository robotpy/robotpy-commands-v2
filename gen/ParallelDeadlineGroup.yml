---

extra_includes:
- frc2/command/Command.h
- frc2/command/Subsystem.h
- src/helpers.h

classes:
  ParallelDeadlineGroup:
    shared_ptr: true
    methods:
      ParallelDeadlineGroup:
        overloads:
          std::shared_ptr<Command>, std::vector<std::shared_ptr<Command>>&&:
          T&&, Types&&...:
            cpp_code: |
              [](std::shared_ptr<Command> cmd, py::args cmds) {
                return std::make_shared<ParallelDeadlineGroup_Trampoline>(cmd, std::move(pyargs2cmdList(cmds)));
              }
            param_override:
              commands:
                ignore: true
      AddCommands:
        overloads:
          Types&&...:
            ignore: true
          std::vector<std::shared_ptr<Command>>&&:
      Initialize:
      Execute:
      End:
      IsFinished:
      RunsWhenDisabled:
      GetInterruptionBehavior:
      InitSendable:
        virtual_xform: |
          [&](py::function fn) {
            auto builderHandle = py::cast(builder, py::return_value_policy::reference);
            fn(builderHandle);
          }

inline_code: |
  cls_ParallelDeadlineGroup
    .def("addCommands", [](ParallelDeadlineGroup * self, py::args cmds) {
      self->AddCommands(std::move(pyargs2cmdList(cmds)));
    })
    .def("deadlineWith", [](std::shared_ptr<ParallelDeadlineGroup> self, py::args cmds) -> std::shared_ptr<ParallelDeadlineGroup> {
      self->AddCommands(std::move(pyargs2cmdList(cmds)));
      return self;
    })
  ;